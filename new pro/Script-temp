<!-- <script>
        //Make the DIV elements draggagle:
        dragElement(document.getElementById("mydiv"));
        
        function dragElement(elmnt) {
          var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
          if (document.getElementById(elmnt.id + "header")) {
            /* if present, the header is where you move the DIV from:*/
            document.getElementById(elmnt.id + "header").onmousedown = dragMouseDown;
          } else {
            /* otherwise, move the DIV from anywhere inside the DIV:*/
            elmnt.onmousedown = dragMouseDown;
          }
        
          function dragMouseDown(e) {
            e = e || window.event;
            e.preventDefault();
            // get the mouse cursor position at startup:
            pos3 = e.clientX;
            pos4 = e.clientY;
            document.onmouseup = closeDragElement;
            // call a function whenever the cursor moves:
            document.onmousemove = elementDrag;
          }
        
          function elementDrag(e) {
            e = e || window.event;
            e.preventDefault();
            // calculate the new cursor position:
            pos1 = pos3 - e.clientX;
            pos2 = pos4 - e.clientY;
            pos3 = e.clientX;
            pos4 = e.clientY;
            // set the element's new position:
            elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
            elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
          }
        
          function closeDragElement() {
            /* stop moving when mouse button is released:*/
            document.onmouseup = null;
            document.onmousemove = null;
          }
        }
        </script> -->

        <!-- <script>
           const createButton = document.getElementById("createButton");
  const elementContainer = document.getElementById("elementContainer");

  createButton.addEventListener("dragstart", function(event) {
    event.dataTransfer.setData("text/plain", "Create Element");
  });

  elementContainer.addEventListener("dragover", function(event) {
    event.preventDefault();
  });

  elementContainer.addEventListener("drop", function(event) {
    event.preventDefault();
    const data = event.dataTransfer.getData("text/plain");
    if (data === "Create Element") {
      const newElement = document.createElement("div");
      newElement.className = "draggable";
      newElement.textContent = "New Element";
      newElement.draggable = true;
      elementContainer.appendChild(newElement);
    }
  });
        </script> -->

        <!-- <script>
          const box = document.getElementById('box');
          const element = document.getElementById('element');
          let isDragging = false;
      
          element.addEventListener('mousedown', (e) => {
            isDragging = true;
            element.style.zIndex = 1; // Bring the element to the front.
            const offsetX = e.clientX - element.getBoundingClientRect().left;
            const offsetY = e.clientY - element.getBoundingClientRect().top;
      
            document.addEventListener('mousemove', (e) => {
              if (isDragging) {
                const x = e.clientX - offsetX - box.getBoundingClientRect().left;
                const y = e.clientY - offsetY - box.getBoundingClientRect().top;
      
                element.style.left = `${x}px`;
                element.style.top = `${y}px`;
              }
            });
      
            document.addEventListener('mouseup', () => {
              isDragging = false;
              element.style.zIndex = 0; // Reset the z-index.
            });
          });
        </script> -->

        <!-- <script>
          const box = document.getElementById('box');
          const elements = document.querySelectorAll('.element');
          let isDragging = false;
          let selectedElement = null;
      
          elements.forEach((element) => {
            element.addEventListener('mousedown', (e) => {
              isDragging = true;
              selectedElement = element;
              selectedElement.style.zIndex = 1; // Bring the element to the front.
              const offsetX = e.clientX - element.getBoundingClientRect().left;
              const offsetY = e.clientY - element.getBoundingClientRect().top;
      
              document.addEventListener('mousemove', (e) => {
                if (isDragging) {
                  const x = e.clientX - offsetX - box.getBoundingClientRect().left;
                  const y = e.clientY - offsetY - box.getBoundingClientRect().top;
      
                  selectedElement.style.left = `${x}px`;
                  selectedElement.style.top = `${y}px`;
                }
              });
      
              document.addEventListener('mouseup', () => {
                isDragging = false;
                selectedElement.style.zIndex = 0; // Reset the z-index.
                selectedElement = null;
              });
            });
          });
        </script> -->

        <!-- <script>
          function createNewElement() {
            const box = document.getElementById('box');
      
            // Create a new div element
            const newElement = document.createElement('button');
            newElement.className = 'element';
            newElement.style.left = '0px'; // You can set the initial position here.
            newElement.style.top = '0px';
      
            // Add the new element to the box
            box.appendChild(newElement);
      
            // Make the new element draggable
            makeElementDraggable(newElement);
            const button=document.getElementsByTagName('button');
            button.innerHTML="button";
          }
          function createTable() {
      const box = document.getElementById('box');

      const newTable = document.createElement('table');
      newTable.className = 'element';
      newTable.style.left = '0px';
      newTable.style.top = '0px';

      const newRow = document.createElement('tr');
      const cell1 = document.createElement('td');
      const cell2 = document.createElement('td');

      cell1.innerHTML = 'Row 1, Cell 1';
      cell2.innerHTML = 'Row 1, Cell 2';

      newRow.appendChild(cell1);
      newRow.appendChild(cell2);

      newTable.appendChild(newRow);
      box.appendChild(newTable);

      makeElementDraggable(newTable);
    }
      
          function makeElementDraggable(element) {
            let isDragging = false;
      
            element.addEventListener('mousedown', (e) => {
              isDragging = true;
              element.style.zIndex = 1; // Bring the element to the front.
              const offsetX = e.clientX - element.getBoundingClientRect().left;
              const offsetY = e.clientY - element.getBoundingClientRect().top;
      
              document.addEventListener('mousemove', (e) => {
                if (isDragging) {
                  const x = e.clientX - offsetX - box.getBoundingClientRect().left;
                  const y = e.clientY - offsetY - box.getBoundingClientRect().top;
      
                  element.style.left = `${x}px`;
                  element.style.top = `${y}px`;
                }
              });
      
              document.addEventListener('mouseup', () => {
                isDragging = false;
                element.style.zIndex = 0; // Reset the z-index.
              });
            });
          }
        </script> -->

        <!-- <script>
          const box = document.getElementById('box');
      
          function createElement(elementType, inputType = null) {
            const newElement = document.createElement(elementType);
            if (inputType) {
              newElement.type = inputType;
            }
      
            if (elementType === 'input') {
              newElement.setAttribute('value', 'Placeholder');
            } else {
              newElement.innerHTML = 'New ' + elementType;
            }
      
            newElement.className = 'element';
            newElement.style.left = '0px';
            newElement.style.top = '0px';
      
            box.appendChild(newElement);
            makeElementDraggable(newElement);
          }
      
          function makeElementDraggable(element) {
            let isDragging = false;
      
            element.addEventListener('mousedown', (e) => {
              isDragging = true;
              element.style.zIndex = 1;
              const offsetX = e.clientX - element.getBoundingClientRect().left;
              const offsetY = e.clientY - element.getBoundingClientRect().top;
      
              document.addEventListener('mousemove', (e) => {
                if (isDragging) {
                  const x = e.clientX - offsetX - box.getBoundingClientRect().left;
                  const y = e.clientY - offsetY - box.getBoundingClientRect().top;
      
                  element.style.left = `${x}px`;
                  element.style.top = `${y}px`;
                }
              });
      
              document.addEventListener('mouseup', () => {
                isDragging = false;
                element.style.zIndex = 0;
              });
            });
          }
      
          // Add event listeners to buttons
          document.getElementById('labelBtn').addEventListener('click', () => createElement('label'));
          document.getElementById('buttonBtn').addEventListener('click', () => createElement('button'));
          document.getElementById('radioBtn').addEventListener('click', () => createElement('input', 'radio'));
          document.getElementById('dropdownBtn').addEventListener('click', () => createElement('select'));
          document.getElementById('linkBtn').addEventListener('click', () => createElement('a'));
          document.getElementById('textboxBtn').addEventListener('click', () => createElement('input', 'text'));
          document.getElementById('checkboxBtn').addEventListener('click', () => createElement('input', 'checkbox'));
          document.getElementById('imageBtn').addEventListener('click', () => createElement('img'));
          document.getElementById('tableBtn').addEventListener('click', () => createTable());
      
          function createTable() {
            const newTable = document.createElement('table');
            newTable.className = 'element';
            newTable.style.left = '0px';
            newTable.style.top = '0px';
      
            const newRow = document.createElement('tr');
            const cell1 = document.createElement('td');
            const cell2 = document.createElement('td');
      
            cell1.innerHTML = 'Row 1, Cell 1';
            cell2.innerHTML = 'Row 1, Cell 2';
      
            newRow.appendChild(cell1);
            newRow.appendChild(cell2);
      
            newTable.appendChild(newRow);
            box.appendChild(newTable);
            makeElementDraggable(newTable);
          }
        </script> -->

        <!-- <script>
          const box = document.getElementById('box');
      
          function createElement(elementType, inputType = null) {
            const newElement = document.createElement(elementType);
            if (inputType) {
              newElement.type = inputType;
            }
      
            if (elementType === 'input') {
              newElement.setAttribute('value', 'Placeholder');
            } else {
              newElement.innerHTML = 'New ' + elementType;
              newElement.title = 'Click to rename';
              newElement.addEventListener('click', () => {
                const newName = prompt('Enter a new name:', newElement.innerHTML);
                if (newName !== null) {
                  newElement.innerHTML = newName;
                }
              });
            }
      
            if (elementType === 'img') {
              newElement.alt = 'Image';
              newElement.title = 'Hover to set image source';
              newElement.addEventListener('click', () => {
                const newSrc = prompt('Enter the image source:');
                if (newSrc !== null) {
                  newElement.src = newSrc;
                }
              });
            }
      
            newElement.className = 'element';
            newElement.style.left = '0px';
            newElement.style.top = '0px';
      
            box.appendChild(newElement);
            makeElementDraggable(newElement);
          }
      
          function makeElementDraggable(element) {
            let isDragging = false;
      
            element.addEventListener('mousedown', (e) => {
              isDragging = true;
              element.style.zIndex = 1;
              const offsetX = e.clientX - element.getBoundingClientRect().left;
              const offsetY = e.clientY - element.getBoundingClientRect().top;
      
              document.addEventListener('mousemove', (e) => {
                if (isDragging) {
                  const x = e.clientX - offsetX - box.getBoundingClientRect().left;
                  const y = e.clientY - offsetY - box.getBoundingClientRect().top;
      
                  element.style.left = `${x}px`;
                  element.style.top = `${y}px`;
                }
              });
      
              document.addEventListener('mouseup', () => {
                isDragging = false;
                element.style.zIndex = 0;
              });
            });
          }
      
          // Add event listeners to buttons
          document.getElementById('labelBtn').addEventListener('click', () => createElement('label'));
          document.getElementById('buttonBtn').addEventListener('click', () => createElement('button'));
          document.getElementById('radioBtn').addEventListener('click', () => createElement('input', 'radio'));
          document.getElementById('dropdownBtn').addEventListener('click', () => createElement('select'));
          document.getElementById('linkBtn').addEventListener('click', () => createElement('a'));
          document.getElementById('textboxBtn').addEventListener('click', () => createElement('input', 'text'));
          document.getElementById('checkboxBtn').addEventListener('click', () => createElement('input', 'checkbox'));
          document.getElementById('imageBtn').addEventListener('click', () => createElement('img'));
          document.getElementById('tableBtn').addEventListener('click', () => createTable());
      
          function createTable() {
            const newTable = document.createElement('table');
            newTable.className = 'element';
            newTable.style.left = '0px';
            newTable.style.top = '0px';
      
            const newRow = document.createElement('tr');
            const cell1 = document.createElement('td');
            const cell2 = document.createElement('td');
      
            cell1.innerHTML = 'Row 1, Cell 1';
            cell2.innerHTML = 'Row 1, Cell 2';
      
            newRow.appendChild(cell1);
            newRow.appendChild(cell2);
      
            newTable.appendChild(newRow);
            box.appendChild(newTable);
            makeElementDraggable(newTable);
          }
        </script> -->

        <!-- <script>
          const box = document.getElementById('box');
          const previewBox = document.getElementById('previewBox');
      
          function updatePreview() {
            const elements = box.querySelectorAll('.element');
            const clonedBox = box.cloneNode(true);
            clonedBox.querySelectorAll('.element').forEach((element, index) => {
              const previewElement = clonedBox.querySelectorAll('.element')[index];
              const previewTextbox = previewElement.querySelector('.resizable-textbox');
              if (previewTextbox) {
                previewTextbox.textContent = '';
              }
            });
            previewBox.innerHTML = '';
            previewBox.appendChild(clonedBox);
          }
      
          function createFilePreview() {
            const boxContent = box.innerHTML;
            const htmlContent = `<!DOCTYPE html>
      <html>
      <head>
      <style>
        .box {
          width: 400px;
          height: 400px;
          background-color: lightblue;
          position: relative;
        }
      
        .element {
          width: 100px;
          height: 50px;
          background-color: pink;
          position: absolute;
          cursor: move;
          display: flex;
          align-items: center;
          justify-content: center;
        }
      
        .resizable-textbox {
          resize: both; /* Allows for both horizontal and vertical resizing */
          overflow: auto; /* Show scrollbar if content overflows */
        }
      
        .preview-box {
          width: 400px;
          height: 200px;
          background-color: #f7f7f7;
          margin-top: 10px;
          overflow: auto;
        }
      </style>
      </head>
      <body>
        <div class="box">
          ${boxContent}
        </div>
      </body>
      </html>`;
      
            const blob = new Blob([htmlContent], { type: 'text/html' });
            const blobUrl = URL.createObjectURL(blob);
      
            const link = document.createElement('a');
            link.href = blobUrl;
            link.download = 'preview.html';
            link.click();
      
            URL.revokeObjectURL(blobUrl);
          }
      
          function createElement(elementType, inputType = null) {
            const newElement = document.createElement(elementType);
            if (inputType) {
              newElement.type = inputType;
            }
      
            if (elementType === 'input') {
              if (inputType === 'text') {
                // Create a resizable textarea
                const textarea = document.createElement('textarea');
                textarea.textContent = 'Placeholder';
                textarea.className = 'element resizable-textbox';
                newElement.appendChild(textarea);
              } else if (inputType === 'checkbox') {
                // Create a checkbox
                newElement.setAttribute('type', 'checkbox');
              }
            } else {
              newElement.innerHTML = 'New ' + elementType;
              newElement.title = 'Click to rename';
              newElement.addEventListener('click', () => {
                const newName = prompt('Enter a new name:', newElement.innerHTML);
                if (newName !== null) {
                  newElement.innerHTML = newName;
                  updatePreview();
                }
              });
            }
      
            if (elementType === 'img') {
              newElement.alt = 'Image';
              newElement.title = 'Hover to set image source';
              newElement.addEventListener('mouseover', () => {
                const newSrc = prompt('Enter the image source:');
                if (newSrc !== null) {
                  newElement.src = newSrc;
                  updatePreview();
                }
              });
            }
      
            newElement.className = 'element';
            newElement.style.left = '0px';
            newElement.style.top = '0px';
      
            box.appendChild(newElement);
            makeElementDraggable(newElement);
            updatePreview();
          }
      
          function makeElementDraggable(element) {
            let isDragging = false;
      
            element.addEventListener('mousedown', (e) => {
              isDragging = true;
              element.style.zIndex = 1;
              const offsetX = e.clientX - element.getBoundingClientRect().left;
              const offsetY = e.clientY - element.getBoundingClientRect().top;
      
              document.addEventListener('mousemove', (e) => {
                if (isDragging) {
                  const x = e.clientX - offsetX - box.getBoundingClientRect().left;
                  const y = e.clientY - offsetY - box.getBoundingClientRect().top;
      
                  element.style.left = `${x}px`;
                  element.style.top = `${y}px`;
                  updatePreview();
                }
              });
      
              document.addEventListener('mouseup', () => {
                isDragging = false;
                element.style.zIndex = 0;
              });
            });
          }
      
          // Add event listeners to buttons
          document.getElementById('labelBtn').addEventListener('click', () => createElement('label'));
          document.getElementById('buttonBtn').addEventListener('click', () => createElement('button'));
          document.getElementById('radioBtn').addEventListener('click', () => createElement('input', 'radio'));
          document.getElementById('dropdownBtn').addEventListener('click', () => createElement('select'));
          document.getElementById('linkBtn').addEventListener('click', () => createElement('a'));
          document.getElementById('textboxBtn').addEventListener('click', () => createElement('input', 'text'));
          document.getElementById('checkboxBtn').addEventListener('click', () => createElement('input', 'checkbox'));
          document.getElementById('imageBtn').addEventListener('click', () => createElement('img'));
          document.getElementById('tableBtn').addEventListener('click', () => createTable());
      
          function createTable() {
            const newTable = document.createElement('table');
            newTable.className = 'element';
            newTable.style.left = '0px';
            newTable.style.top = '0px';
      
            const newRow = document.createElement('tr');
            const cell1 = document.createElement('td');
            const cell2 = document.createElement('td');
      
            cell1.innerHTML = 'Row 1, Cell 1';
            cell2.innerHTML = 'Row 1, Cell 2';
      
            newRow.appendChild(cell1);
            newRow.appendChild(cell2);
      
            newTable.appendChild(newRow);
            box.appendChild(newTable);
            makeElementDraggable(newTable);
            updatePreview();
          }
      
          // Add event listener to the Preview button
          document.getElementById('previewButton').addEventListener('click', createFilePreview);
        </script> -->

        <!-- <script>
        const box = document.getElementById('box');
    
        function createElement(elementType, inputType = null) {
          const newElement = document.createElement(elementType);
          if (inputType) {
            newElement.type = inputType;
          }
    
          if (elementType === 'input') {
            if (inputType === 'text') {
              // Create a resizable textarea
              const textarea = document.createElement('textarea');
              textarea.textContent = 'Placeholder';
              textarea.className = 'element resizable-textbox';
              newElement.appendChild(textarea);
            } else if (inputType === 'checkbox') {
              // Create a checkbox
              newElement.setAttribute('type', 'checkbox');
            }
          } else {
            if (elementType === 'a') {
        // Create a link with user-defined URL
        const linkUrl = prompt('Enter the URL for the link:');
        if (linkUrl !== null) {
          newElement.href = linkUrl;
          newElement.addEventListener('click', (event) => {
            event.preventDefault(); // Prevent the default link behavior
          });
        }
      }
            newElement.innerHTML = 'New ' + elementType;
            newElement.title = 'Click to rename';
            newElement.addEventListener('click', () => {
              const newName = prompt('Enter a new name:', newElement.innerHTML);
              if (newName !== null) {
                newElement.innerHTML = newName;
              }
            });
          }
    
          if (elementType === 'img') {
            newElement.alt = 'Image';
            newElement.title = 'Hover to set image source';
            newElement.addEventListener('click', () => {
              const newSrc = prompt('Enter the image source:');
              if (newSrc !== null) {
                newElement.src = newSrc;
              }
            });
          }
    
          newElement.className = 'element';
          newElement.style.left = '0px';
          newElement.style.top = '0px';
    
          box.appendChild(newElement);
          makeElementDraggable(newElement);
        }
    
        function makeElementDraggable(element) {
          let isDragging = false;
    
          element.addEventListener('mousedown', (e) => {
            isDragging = true;
            element.style.zIndex = 1;
            const offsetX = e.clientX - element.getBoundingClientRect().left;
            const offsetY = e.clientY - element.getBoundingClientRect().top;
    
            document.addEventListener('mousemove', (e) => {
              if (isDragging) {
                const x = e.clientX - offsetX - box.getBoundingClientRect().left;
                const y = e.clientY - offsetY - box.getBoundingClientRect().top;
    
                element.style.left = `${x}px`;
                element.style.top = `${y}px`;
              }
            });
    
            document.addEventListener('mouseup', () => {
              isDragging = false;
              element.style.zIndex = 0;
            });
          });
        }
    
        // Add event listeners to buttons
        document.getElementById('labelBtn').addEventListener('click', () => createElement('label'));
        document.getElementById('buttonBtn').addEventListener('click', () => createElement('button'));
        document.getElementById('radioBtn').addEventListener('click', () => createElement('input', 'radio'));
        document.getElementById('dropdownBtn').addEventListener('click', () => createElement('select'));
        document.getElementById('linkBtn').addEventListener('click', () => createElement('a'));
        document.getElementById('textboxBtn').addEventListener('click', () => createElement('input', 'text'));
        document.getElementById('checkboxBtn').addEventListener('click', () => createElement('input', 'checkbox'));
        document.getElementById('imageBtn').addEventListener('click', () => createElement('img'));
        document.getElementById('tableBtn').addEventListener('click', () => createTable());
    
        function createTable() {
    const newTable = document.createElement('table');
    newTable.className = 'element';
    newTable.style.left = '0px';
    newTable.style.top = '0px';

    for (let i = 0; i < 3; i++) {
      const newRow = document.createElement('tr');
      for (let j = 0; j < 3; j++) {
        const cell = document.createElement('td');
        cell.innerHTML = 'Cell ' + (i * 3 + j + 1);
        cell.addEventListener('click', () => {
          const newValue = prompt('Enter a new value:', cell.innerHTML);
          if (newValue !== null) {
            cell.innerHTML = newValue;
          }
        });
        newRow.appendChild(cell);
      }
      newTable.appendChild(newRow);
    }

    box.appendChild(newTable);
    makeElementDraggable(newTable);
  }
    
        // Add event listener to the Preview button
        document.getElementById('previewButton').addEventListener('click', () => {
          // Create a Blob containing the HTML content of the box
          const htmlContent = `<!DOCTYPE html>
    <html>
    <head>
    <style>
      .box {
        width: 400px;
        height: 400px;
        background-color: lightblue;
        position: relative;
      }
      .element {
        width: 100px;
        height: 50px;
        background-color: pink;
        position: absolute;
        cursor: move;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .resizable-textbox {
        resize: both;
        overflow: auto;
      }
    </style>
    </head>
    <body>
      <div class="box">
        ${box.innerHTML}
      </div>
    </body>
    </html>`;
    
          const blob = new Blob([htmlContent], { type: 'text/html' });
          const blobUrl = URL.createObjectURL(blob);
    
          // Create a link to download the preview
          const link = document.createElement('a');
          link.href = blobUrl;
          link.download = 'preview.html';
          link.click();
    
          // Clean up by revoking the URL
          URL.revokeObjectURL(blobUrl);
        });
      </script> -->